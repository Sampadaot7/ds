#include<stdio.h>
#include<stdlib.h>

int flag=0;
typedef struct BST
{
    int data;
    struct BST *lson, *rson;
} node;

void insert(node *, node *);
node *search(node *, int, node **);

node *get_node()
{
    node *temp;
    temp = (node *)malloc(sizeof(node));
    temp->lson = NULL;
    temp->rson = NULL;
    return temp;
}

void insert(node *root, node *new_node)
{
    if (new_node->data < root->data)
    {
        if (root->lson == NULL)
            root->lson = new_node;
        else
            insert(root->lson, new_node);
    }
    if (new_node->data > root->data)
    {
        if (root->rson == NULL)
            root->rson = new_node;
        else
            insert(root->rson, new_node);
    }
}

node *search(node *root, int key, node **parent)
{
    node *temp;
    temp = root;
    while (temp != NULL)
    {
        if (temp->data == key)
        {
            printf("\nThe %d Element is Present", temp->data);
            flag = 1;
            return temp;
        }
        *parent = temp;
        if (temp->data > key)
            temp = temp->lson;
        else
            temp = temp->rson;
    }
    return NULL;
}

void main()
{
    int choice;
    int ans = 1;
    int key;
    node *new_node, *root, *tmp, *parent;
    node *get_node();
    root = NULL;
    printf("\nProgram For Binary Search Tree\n");
    printf("\n------------------------------\n");
    while(1)
    {
        printf("\n\n1.Create");
        printf("\n2.Search");
        printf("\n3.Exit");
        printf("\nEnter your choice :");
        scanf("%d", &choice);
        switch(choice)
        {
        case 1:
            do
            {
                new_node = get_node();
                printf("\nEnter The Element ");
                scanf("%d", &new_node->data);
                if (root == NULL)
                    root = new_node;
                else
                    insert(root, new_node);
                printf("\nWant To enter More Elements?(1/0)");
                scanf("%d", &ans);
            } while (ans);
            break;
        case 2:
            printf("\nEnter Element to be searched :");
            scanf("%d", &key);
            tmp = search(root, key, &parent);
            if (flag == 1)
            {
                printf("\nParent of node %d is %d", tmp->data, parent->data);
            }
            else
            {
                printf("\n The %d Element is not Present", key);
            }
            flag = 0;
            break;    
        case 3:
            exit (0);
        }
    }
}

