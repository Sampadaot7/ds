#include<stdio.h>
#include<stdlib.h>
struct node
{
  int data;
  struct node *left;
  struct node *right;
};
struct node *insert(struct node *root,int data)
{

   struct node *temp = (struct node *)malloc(sizeof(struct node));
   temp->data = data;
   temp->left = NULL;
   temp->right= NULL;
   if(root==NULL)
   {
      root = temp;
      return root;
   }
   if(root->data<data)
   root->right = insert(root->right,data);
   else
   root->left  = insert(root->left,data);

   return root;
}
void inorder(struct node *root)
{
   if(root==NULL)
    return;
   inorder(root->left);
   printf("%d ",root->data);
   inorder(root->right);
}
void preorder(struct node *root)
{
  if(root==NULL)
  return;
  printf("%d ",root->data);
  preorder(root->left);
  preorder(root->right);
  return;
}
void postorder(struct node *root)
{
  if(root==NULL)
  return;
   postorder(root->left);
   postorder(root->right);
   printf("%d ",root->data);
}
int main()
{
   int n;
   printf("Enter number of nodes :\n");
   scanf("%d",&n);
   struct node *root= NULL,*head;
   int arr[100];
   int i;
   for(i=0;i<n;i++)
    {
       printf("Enter the value of node : %d\n",i+1);
       scanf("%d",&arr[i]);
    }
    for(i=0;i<n;i++)
    root = insert(root,arr[i]);
   printf("The preorder traversal of the given tree is :\n");
   preorder(root);
   printf("\nThe inorder traversal of the given tree is :\n");
   inorder(root);
   printf("\nThe postorder traversal of the given tree is : \n");
   postorder(root);
   return 0;
}