#include <stdio.h>
#include<stdlib.h>
#define SIZE 5

int items[SIZE];
int front = -1, rear = -1;

int isFull()
{
    if ((front == rear + 1) || (front == 0 && rear == SIZE - 1))
    return 1;
    return 0;
}

int isEmpty()
{
    if (front == -1) 
    return 1;
    return 0;
}

void enQueue() 
{
    int element;
    if (isFull())
    printf("\n Queue is full or Queue OVERFLOW!!\n");
    else 
    {
        printf("Enter the element to be inserted\n");
        scanf("%d",&element);
        if (front == -1) front = 0;
        rear = (rear + 1) % SIZE;
        items[rear] = element;
        printf("\n Inserted element -> %d\n", element);
  }
}

int deQueue() 
{
    int element;
    if (isEmpty()) 
    {
        printf("\n Queue is empty or Queue UNDERFLOW!! \n");
        return (-1);
    } 
    else 
    {
        element = items[front];
        if (front == rear) 
        {
            front = -1;
            rear = -1;
        } 
        else
        {
            front = (front + 1) % SIZE;
        }
        printf("\n Deleted element -> %d \n", element);
        return (element);
    }
}

void display() 
{
    int i;
    if (isEmpty())
    printf(" \n Empty Queue\n");
    else 
        {
            printf("\n Front -> %d ", front);
            printf("\n Items -> ");
            for (i = front; i != rear; i = (i + 1) % SIZE) 
            {
                printf("%d ", items[i]);
            }
        printf("%d ", items[i]);
        printf("\n Rear -> %d \n", rear);
        }
}

int main() {
    int ch;
    printf("CIRCULAR QUEUE OPERATIONS\n");
    printf("-------------------------\n");
    do{
    printf("Enter your choice from the below options\n");
    printf("  1.  INSERT\n");
    printf("  2.  DELETE\n");
    printf("  3.  DISPLAY\n");
    printf("  4.  EXIT\n");
    scanf("%d",&ch);
    switch(ch)
    {
        case 1:enQueue();
               break;
        case 2:deQueue();
               break;
        case 3:display();
               break;
        case 4:exit(0);
        default:printf("INVALID OPERATION\n");
    }
    }while(1);
  return 0;
}