#include <stdio.h>
#include <stdlib.h>

typedef struct BST
{
    int data;
    struct BST *lson, *rson;
} node;

void insert(node *, node *);
void inorder(node *);
void preorder(node *);
void postorder(node *);

node *get_node()
{
    node *temp;
    temp = (node *)malloc(sizeof(node));
    temp->lson = NULL;
    temp->rson = NULL;
    return temp;
}

void insert(node *root, node *new_node)
{
    if (new_node->data < root->data)
    {
        if (root->lson == NULL)
            root->lson = new_node;
        else
            insert(root->lson, new_node);
    }
    if (new_node->data > root->data)
    {
        if (root->rson == NULL)
            root->rson = new_node;
        else
            insert(root->rson, new_node);
    }
}

void inorder(node *temp)
{
    if (temp != NULL)
    {
        inorder(temp->lson);
        printf("%d\t", temp->data);
        inorder(temp->rson);
    }
}

void preorder(node *temp)
{
    if (temp != NULL)
    {
        printf("%d\t", temp->data);
        preorder(temp->lson);
        preorder(temp->rson);
    }
}

void postorder(node *temp)
{
    if (temp != NULL)
    {
        postorder(temp->lson);
        postorder(temp->rson);
        printf("%d\t", temp->data);
    }
}

void main()
{
    int choice;
    int ans = 1;
    int key;
    node *new_node, *root, *tmp, *parent;
    node *get_node();
    root = NULL;
    printf("\nProgram For Binary Search Tree\n");
    printf("\n------------------------------\n");
    do
    {
        printf("\n\n1.Create");
        printf("\n2.Inorder traversal");
        printf("\n3.Preorder traversal");
        printf("\n4.Post order traversal");
        printf("\n5.EXIT");
        printf("\nEnter your choice :");
        scanf("%d", &choice);
        switch(choice)
        {
        case 1:
            do
            {
                new_node = get_node();
                printf("\nEnter The Element ");
                scanf("%d", &new_node->data);
                if (root == NULL)
                    root = new_node;
                else
                    insert(root, new_node);
                printf("\nWant To enter More Elements?(1/0)");
                scanf("%d", &ans);
            } while (ans);
            break;
        case 2:
            if (root == NULL)
                printf("Tree Is Not Created");
            else
            {
                printf("\nThe Inorder display :");
                inorder(root);
            }
            break;
        case 3:
            if (root == NULL)
                printf("Tree Is Not Created");
            else
            {
                printf("\nThe Preorder display : ");
                preorder(root);
            }
            break;
        case 4:
            if (root == NULL)
                printf("Tree Is Not Created");
            else
            {
                printf("\nThe Postorder display : ");
                postorder(root);
            }
            break;
        }
    } while (choice != 5);
}